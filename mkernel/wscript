#!/usr/bin/env python

def configure(ctx):

  ctx.env.m_mlibraries.append('mkernel')

  # set configuration header
  # (with import/export symbols depending on compiler)
  ctx.undefine('MVERSION')
  ctx.define('MVERSION',ctx.env.m_mversion)
  ctx.define('M_SYMEXPORT','',0)
  ctx.define('M_SYMIMPORT','',0)
  if ctx.env['CXX_NAME']=='gcc':
    ctx.define('M_SYMBOL_EXPORT','',0) #__attribute__ ((dllexport))
    ctx.define('M_SYMBOL_IMPORT','',0) #__attribute__ ((dllimport))
  elif ctx.env['CXX_NAME']=='msvc':
    ctx.define('M_SYMBOL_EXPORT','__declspec(dllexport)',0)
    ctx.define('M_SYMBOL_IMPORT','__declspec(dllimport)',0)
  ctx.write_config_header('mconfig.h')


def build(ctx):

  # mkernel library
  ctx.new_task_gen(
    features = 'cxx cshlib',
    name     = 'mkernel',
    target   = 'mkernel',
    includes = ['.'],
    source   = [
      'ext/error_code.cpp','ext/fparser.cc','ext/fpoptimizer.cc',
      'cool/Element.cpp','cool/MathTools.cpp','cool/Framework.cpp',
      'mlinearsystem.cpp','mmesh.cpp' ] )

  # m executable
  ctx.new_task_gen(
    features = 'cxx cprogram',
    target   = 'm',
    includes = ['.'],
    source   = ['m.cpp'],
    uselib_local = ctx.env.m_mlibraries,
    rpath    = ctx.env['PREFIX'] )

